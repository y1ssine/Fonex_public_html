function ptsBlockFabric() {
    this._blocks = [], this._isSorting = !1, this._animationSpeed = g_ptsAnimationSpeed
}

function ptsBlockBase(blockData) {
    this._data = blockData, this._$ = null, this._original$ = null, this._id = 0, this._iter = 0, this._elements = [], this._animationSpeed = 300, this._disableContentChange = !1
}

function ptsBlock_price_table(blockData) {
    this._increaseHoverFontPerc = 20, this._$lastHoveredCol = null, this._refreshColsBinded = !1, this._onloadHandle = !1, this._isAlreadyShowed = !1, this._isResponsiveDescInit = !1, ptsBlock_price_table.superclass.constructor.apply(this, arguments)
}

function ptsElementBase(jqueryHtml, block) {
    if (this._iterNum = 0, this._id = "el_" + mtRand(1, 999999), this._animationSpeed = g_ptsAnimationSpeed, this._$ = jqueryHtml, this._block = block, "undefined" == typeof this._menuOriginalId && (this._menuOriginalId = ""), this._innerImgsCount = 0, this._innerImgsLoaded = 0, this._menu = null, this._menuClbs = {}, "undefined" == typeof this._menuClass && (this._menuClass = "ptsElementMenu"), this._menuOnBottom = !1, this._code = "base", this._initedComplete = !1, this._editArea = null, "undefined" == typeof this._isMovable && (this._isMovable = !1), this._moveHandler = null, this._sortInProgress = !1, "undefined" == typeof this._showMenuEvent && (this._showMenuEvent = "click"), "undefined" == typeof this._changeable && (this._changeable = !1), g_ptsEdit) {
        this._init(), this._initMenuClbs(), this._initMenu();
        var images = this._$.find("img");
        if (images && (this._innerImgsCount = images.length)) {
            this._innerImgsLoaded = 0;
            var self = this;
            images.load(function() {
                self._innerImgsLoaded++, self._$.find("img").length == self._innerImgsLoaded && self._afterFullContentLoad()
            })
        }
    }
    this._onlyFirstHtmlInit(), this._initedComplete = !0
}

function ptsElement_btn(jqueryHtml, block) {
    "undefined" == typeof this._menuOriginalId && (this._menuOriginalId = "ptsElMenuBtnExl"), this._menuClass = "ptsElementMenu_btn", this._haveAdditionBgEl = null, this._changeable = !0, this.includePostLinks = !0, ptsElement_btn.superclass.constructor.apply(this, arguments)
}

function ptsElement_table_col(jqueryHtml, block) {
    "undefined" == typeof this._menuOriginalId && (this._menuOriginalId = "ptsElMenuTableColExl"), "undefined" == typeof this._menuClass && (this._menuClass = "ptsElementMenu_table_col"), "undefined" == typeof this._isMovable && (this._isMovable = !0), this._showMenuEvent = "hover", this._colNum = 0, ptsElement_table_col.superclass.constructor.apply(this, arguments)
}

function ptsElement_table_col_desc(jqueryHtml, block) {
    this._isMovable = !1, ptsElement_table_col_desc.superclass.constructor.apply(this, arguments)
}

function ptsElement_table_cell_txt(jqueryHtml, block) {
    block.getParam("responsive_text") && jqueryHtml.find("span, p").responsiveText({
        minFontSize: 14
    }), this.includePostLinks = !0, ptsElement_table_cell_txt.superclass.constructor.apply(this, arguments)
}! function($) {
    $.fn.responsiveText = function(options) {
        var settings = $.extend({
            minFontSize: Number.NEGATIVE_INFINITY,
            maxFontSize: Number.POSITIVE_INFINITY
        }, options);
        return this.each(function() {
            var $this = $(this),
                text = $this.get(0);
            if (text) {
                $this.data("original-font-size", parseFloat(window.getComputedStyle(text).fontSize), 10);
                var resizer = function() {
                    var ratio = null,
                        originalWidth = window.screen.availWidth,
                        currentWidth = window.innerWidth,
                        size = $this.data("original-font-size");
                    originalWidth != currentWidth && size && (currentWidth != originalWidth && (ratio = originalWidth / currentWidth), currentWidth > originalWidth ? size *= ratio : size /= ratio, size = Math.max(Math.min(size, settings.maxFontSize), settings.minFontSize), $this.css("font-size", size + "px"))
                };
                resizer(), $(window).on("resize.responsiveText orientationchange.responsiveText", resizer)
            }
        })
    }
}(jQuery), ptsBlockFabric.prototype.addFromHtml = function(blockData, jqueryHtml) {
        var block = this.add(blockData);
        block.setRaw(jqueryHtml)
    }, ptsBlockFabric.prototype.add = function(blockData) {
        var blockData = jQuery.extend({}, blockData);
        blockData.original_id || (blockData.original_id = blockData.id, blockData.id = 0);
        var blockClass = window["ptsBlock_" + blockData.cat_code];
        if (blockClass) {
            var block = new blockClass(blockData),
                blockIter = this._blocks.push(block);
            return block.setIter(blockIter - 1), block
        }
        //console.log("Block Class For " + blockData.cat_code + " Not Found!!!")
    }, ptsBlockFabric.prototype.getByViewId = function(viewId) {
        if (this._blocks && this._blocks.length)
            for (var i = 0; i < this._blocks.length; i++)
                if (this._blocks[i].get("view_id") == viewId) return this._blocks[i];
        return !1
    }, ptsBlockBase.prototype.get = function(key) {
        return this._data[key]
    }, ptsBlockBase.prototype.getParam = function(key) {
        return !!this._data.params[key] && this._data.params[key].val
    },
    ptsBlockBase.prototype.setParam = function(key, value) {
        this._data.params[key] || (this._data.params[key] = {}),
            this._data.params[key].val = value
    }, ptsBlockBase.prototype.getRaw = function() {
        return this._$
    }, ptsBlockBase.prototype.$ = function() {
        return this.getRaw()
    }, ptsBlockBase.prototype.setRaw = function(jqueryHtml) {
        this._$ = jqueryHtml, this._resetElements(), this._initHtml(), this.getParam("font_family") && this._setFont(this.getParam("font_family"))
    }, ptsBlockBase.prototype._initElements = function() {
        this._initElementsForArea(this._$)
    }, ptsBlockBase.prototype._initElementsForArea = function(area) {
        var block = this,
            addedElements = [],
            initElement = function(htmlEl) {
                var elementCode = jQuery(htmlEl).data("el"),
                    elementClass = window["ptsElement_" + elementCode];
                if (elementClass) {
                    var newElement = new elementClass(jQuery(htmlEl), block);
                    newElement._setCode(elementCode);
                    var newIterNum = block._elements.push(newElement);
                    addedElements.push(newElement), newElement.setIterNum(newIterNum - 1)
                } else g_ptsEdit && console.log("Undefined Element [" + elementCode + "] !!!")
            };
        return jQuery(area).find(".ptsEl").each(function() {
            initElement(this)
        }), jQuery(area).hasClass("ptsEl") && initElement(area), this._afterInitElements(), addedElements
    }, ptsBlockBase.prototype._afterInitElements = function() {}, ptsBlockBase.prototype._resetElements = function() {
        this._clearElements(), this._initElements()
    }, ptsBlockBase.prototype._clearElements = function() {
        if (this._elements && this._elements.length) {
            for (var i = 0; i < this._elements.length; i++) this._elements[i].destroy();
            this._elements = []
        }
    }, ptsBlockBase.prototype.getElements = function() {
        return this._elements
    }, ptsBlockBase.prototype._initHtml = function() {}, ptsBlockBase.prototype.setIter = function(iter) {
        this._iter = iter
    }, ptsBlockBase.prototype.showLoader = function(txt) {
        var loaderHtml = jQuery("#ptsBlockLoader");
        txt = txt ? txt : loaderHtml.data("base-txt"), loaderHtml.find(".ptsBlockLoaderTxt").html(txt), loaderHtml.css({
            height: this._$.height(),
            top: this._$.offset().top
        }).addClass("active")
    }, ptsBlockBase.prototype.hideLoader = function() {
        var loaderHtml = jQuery("#ptsBlockLoader");
        loaderHtml.removeClass("active")
    }, ptsBlockBase.prototype._setFont = function(fontFamily) {
        var $fontLink = this._getFontLink();
        toeInArrayPts(fontFamily, ptsBuildConst.standardFonts) === !1 && $fontLink.attr({
            href: "https://fonts.googleapis.com/css?family=" + encodeURIComponent(fontFamily)
        }), this._$.css({
            "font-family": fontFamily
        }), this.setParam("font_family", fontFamily)
    }, ptsBlockBase.prototype._getFontLink = function() {
        var $link = this._$.find("link.ptsFont");
        return $link.length || ($link = jQuery('<link class="ptsFont" rel="stylesheet" type="text/css"/>').appendTo(this._$)), $link
    }, extendPts(ptsBlock_price_table, ptsBlockBase), ptsBlock_price_table.prototype._getColsContainer = function() {
        return this._$.find(".ptsColsWrapper:first")
    }, ptsBlock_price_table.prototype._getCols = function(includeDescCol) {
        return this._getColsContainer().find(".ptsCol" + (includeDescCol ? "" : ":not(.ptsTableDescCol)"))
    }, ptsBlock_price_table.prototype._afterInitElements = function() {
        if (ptsBlock_price_table.superclass._afterInitElements.apply(this, arguments), parseInt(this.getParam("enb_hover_animation")) && this._initHoverEffect(), this.getParam("table_align") && this._$.addClass("ptsTableAlign_" + this.getParam("table_align")), this.getParam("text_align") && this._$.addClass("ptsAlign_" + this.getParam("text_align")), this._disableContentChange || this._refreshCellsHeight(), this._refreshColsBinded || (this._$.bind("ptsBlockContentChanged", jQuery.proxy(function() {
                this._refreshCellsHeight()
            }, this)), this._refreshColsBinded = !0), _ptsIsEditMode()) this.columnChidrensWidthCalc();
        else {
            var $tooltipstedCells = this._$.find(".ptsCell[title], .ptsColFooter[title], .ptsColHeader[title], .ptsColDesc[title]");
            if ("1" != this.getParam("disable_custom_tooltip_style") && $tooltipstedCells && $tooltipstedCells.length) {
                var tooltipsterSettings = {
                    contentAsHTML: !0,
                    interactive: !0,
                    speed: 250,
                    delay: 0,
                    animation: "swing",
                    maxWidth: 450,
                    position: "top"
                };
                $tooltipstedCells.tooltipster(tooltipsterSettings)
            }
            var self = this,
                PTS_VISIBLE_SET_HEIGHT_KEY = "PTS-VISIBLE-SET-HEIGHT-KEY";
            this._fixResponsive(), jQuery(window).resize(function() {
                self._$.is(":visible") ? (self._fixResponsive(), self._refreshCellsHeight()) : self._$.data(PTS_VISIBLE_SET_HEIGHT_KEY, !1)
            }), jQuery(function() {
                var isEnableLazyLoad = function() {
                        return self._$.find("img[data-lazy-src]:not(.lazyloaded)").length > 0
                    },
                    checkedLazyLoadLib = !1;
                isEnableLazyLoad() && (checkedLazyLoadLib = !0), document.body.addEventListener("DOMSubtreeModified", function(e) {
                    if (checkedLazyLoadLib && 1 == e.target.nodeType && "IMG" == e.target.nodeName && jQuery.contains(self._$.get(0), e.target)) {
                        var isLoadedImages = !0;
                        self._$.find("img[data-lazy-src]").each(function() {
                            var $this = jQuery(this);
                            $this.hasClass("lazyloaded") || $this.hasClass("lazyload") || (isLoadedImages = !1)
                        }), isLoadedImages && (checkedLazyLoadLib = !1, self._$.find("img[data-lazy-src]").on("load", function() {
                            self._fixResponsive(), self._refreshCellsHeight()
                        }))
                    }!self._isAlreadyShowed && self._$ && self._$.visible() && (self._isAlreadyShowed = !0, self._fixResponsive(), self._refreshCellsHeight())
                }, !1), self.setCalcWidth()
            })
        }
        var self = this;
        this._onloadHandle || (this._onloadHandle = !0, jQuery(window).load(function() {
            self._refreshCellsHeight()
        }))
    }, ptsBlock_price_table.prototype._initHoverEffect = function() {
        if (_ptsIsEditMode()) return void this.setParam("enb_hover_animation", 1);
        var $cols = this._getCols(),
            self = this;
        this._disableHoverEffect($cols), $cols.bind("hover.animation", function(e) {
            switch (e.type) {
                case "mouseenter":
                case "mousein":
                    self._increaseHoverFont(jQuery(this));
                    break;
                case "mouseleave":
                case "mouseout":
                    self._backHoverFont(jQuery(this))
            }
        }), this.setParam("enb_hover_animation", 1)
    },

    ptsBlock_price_table.prototype._increaseHoverFont = function($col) {
        var self = this;
        if (!_ptsIsEditMode()) {
            var $descCell = $col.find(".ptsColDesc");
            if ($col.height($col.height()),
                $descCell.find("span").each(function() {
                    var newFontSize = jQuery(this).data("new-font-size");
                    if (!newFontSize) {
                        var prevFontSize = jQuery(this).css("font-size"),
                            fontUnits = prevFontSize.replace(/\d+/, ""),
                            fontSize = parseInt(str_replace(prevFontSize, fontUnits, ""));
                        fontSize && fontUnits && (newFontSize = Math.ceil(fontSize + self._increaseHoverFontPerc * fontSize / 100),
                            jQuery(this).data("prev-font-size", prevFontSize).data("font-units", fontUnits).data("new-font-size", newFontSize))
                    }
                    newFontSize && jQuery(this).css("font-size", newFontSize + jQuery(this).data("font-units"))
                }),
                "1" != this.getParam("is_horisontal_row_type")) {

                if (!$descCell.attr('data-prev-height')) {
                    var descHeight = $descCell.outerHeight();
                    $descCell.attr('data-prev-height', descHeight);
                } else {
                    descHeight = $descCell.attr('data-prev-height');
                }
                $descCell.css({
                    'min-height': descHeight,
                    'height': 'auto'
                });

            }

            $col.addClass("hover"), _ptsIsEditMode() && setTimeout(function() {
                var colElement = self.getElementByIterNum($col.data("iter-num"));
                colElement && colElement.repositeMenu()
            }, g_ptsHoverAnim)
        }
    }, ptsBlock_price_table.prototype._backHoverFont = function($col) {
        if (!_ptsIsEditMode()) {
            $col.removeClass("hover");
            var $descCell = $col.find(".ptsColDesc");
            $descCell.find("span").each(function() {
                var prevFontSize = jQuery(this).data("prev-font-size");
                prevFontSize && jQuery(this).css("font-size", prevFontSize)
            }), setTimeout(function() {
                $descCell.outerHeight($descCell.data("prev-height"))
            }, 300)
        }
    }, ptsBlock_price_table.prototype._disableHoverEffect = function($cols) {
        this.setParam("enb_hover_animation", 0), _ptsIsEditMode() || ($cols = $cols ? $cols : this._getCols(), $cols.unbind("hover.animation"))
    }, ptsBlock_price_table.prototype.getColSelectors = function() {
        return {
            header: {
                sel: ".ptsColHeader"
            },
            desc: {
                sel: ".ptsColDesc"
            },
            rows: {
                sel: ".ptsRows"
            },
            cells: {
                sel: ".ptsCell"
            },
            footer: {
                sel: ".ptsColFooter"
            }
        }
    }, ptsBlock_price_table.prototype.getMaxColsSizes = function(widthDesc) {
        var $cols = this._getCols(widthDesc),
            sizes = this.getColSelectors();
        return $cols.each(function() {
            for (var key in sizes)
                if ("rows" != key) {
                    var $entity = jQuery(this).find(sizes[key].sel);
                    if ($entity && $entity.length)
                        if ("cells" == key) {
                            sizes[key].height || (sizes[key].height = []);
                            var cellNum = 0;
                            $entity.each(function() {
                                var prevHeight = jQuery(this).outerHeight();
                                jQuery(this).css("height", "auto");
                                var height = jQuery(this).outerHeight();
                                (!sizes[key].height[cellNum] || sizes[key].height[cellNum] < height) && (sizes[key].height[cellNum] = height), jQuery(this).outerHeight(prevHeight), cellNum++
                            })
                        } else {
                            var prevHeight = $entity.outerHeight();
                            $entity.css("height", "auto");
                            var height = $entity.outerHeight();
                            (!sizes[key].height || sizes[key].height < height) && (sizes[key].height = height), $entity.outerHeight(prevHeight)
                        }
                }
        }), sizes
    }, ptsBlock_price_table.prototype.getColumnWithInfo = function(strWidthAttr) {
        var trimAttr = strWidthAttr.trim(),
            number = trimAttr.match("\\d+"),
            isPerc = trimAttr.match("%"),
            isPx = trimAttr.match("\\d+");
        return null === number || null === isPerc && null === isPx ? null : new Object({
            num: number.length && number.length > 0 && !isNaN(parseInt(number[0])) ? parseInt(number[0]) : null,
            isPerc: null !== isPerc
        })
    },

    ptsBlock_price_table.prototype.setColsWidth = function(width, perc) {
        var thatObj = this;
        if ("1" != thatObj.getParam("is_horisontal_row_type")) {
            if ("1" === this.getParam("dsbl_responsive")) {
                var tableWidth = this._$.width(),
                    fixedValueTableWidth = this._$.width(),
                    $cols = this._getCols(!0),
                    notSettedColumnWidthArr = new Array;
                if ($cols.each(function() {
                        var col1 = jQuery(this);
                        if (col1.length > 0 && col1[0].style && col1[0].style.width) {
                            var colWidthObj = thatObj.getColumnWithInfo(col1[0].style.width);
                            if (colWidthObj && "num" in colWidthObj && "isPerc" in colWidthObj) {
                                var calcColWidth = 0;
                                calcColWidth = colWidthObj.isPerc ? fixedValueTableWidth * colWidthObj.num / 100 : colWidthObj.num;
                                var colPdL = parseFloat(col1.css("padding-left")),
                                    colPdR = parseFloat(col1.css("padding-right")),
                                    colMgL = parseFloat(col1.css("margin-left")),
                                    colMgR = parseFloat(col1.css("margin-right")),
                                    colSumMarginPadding = 0;
                                isNaN(colPdL) || (colSumMarginPadding += colPdL), isNaN(colPdR) || (colSumMarginPadding += colPdR), isNaN(colMgL) || (colSumMarginPadding += colMgL), isNaN(colMgR) || (colSumMarginPadding += colMgR), tableWidth -= calcColWidth, calcColWidth = Math.floor(calcColWidth - colSumMarginPadding), calcColWidth < 0 && (calcColWidth = 0), col1.width(calcColWidth)
                            } else notSettedColumnWidthArr[notSettedColumnWidthArr.length] = col1
                        } else notSettedColumnWidthArr[notSettedColumnWidthArr.length] = col1
                    }), tableWidth > 0 && notSettedColumnWidthArr.length > 0) {
                    var calcWidthForNsCol = Math.round(tableWidth / notSettedColumnWidthArr.length);
                    for (var oneNsColumn in notSettedColumnWidthArr) notSettedColumnWidthArr[oneNsColumn].width(calcWidthForNsCol)
                }
            } else if (width = parseFloat(width)) {
                perc || this.setParam("col_width", width);
                var $cols = this._getCols(!0);
                width += perc ? "%" : "px", $cols.css({
                    width: width
                })
            }
        } else this.columnChidrensWidthCalc()
    },
    ptsBlock_price_table.prototype.columnChidrensWidthCalc = function() {
        if ("1" != this.getParam("is_horisontal_row_type")) {} else {
            var $cols = this._getCols(!0);
            $cols.each(function(ind, oneCol) {
                var currColumn = jQuery(oneCol),
                    emptyChilds = currColumn.find(".ptsTableElementContent").children(':not(:has(">div")):not(".ptsColBadge")'),
                    level1Childs = currColumn.find(".ptsTableElementContent").children(':has(">div"):not(".ptsColBadge")'),
                    level1ChildRows = currColumn.find(".ptsTableElementContent").children(".ptsRows"),
                    level2ChildRows = level1ChildRows.children(),
                    allChildCount = level1Childs.length,
                    level2ChildCount = 1;
                level1ChildRows.length > 0 && level2ChildRows.length > 0 && (allChildCount += level2ChildRows.length - 1, level2ChildCount = level2ChildRows.length), emptyChilds.css({
                    width: "0%",
                    margin: "0",
                    padding: "0"
                });
                var oneChildWidth = Math.floor(95 / allChildCount);
                level1Childs.css("width", oneChildWidth + "%");
                var widthInPixel = level1Childs.css("width");
                level1ChildRows.css("width", level2ChildCount * oneChildWidth + 2 + "%"), level2ChildRows.css("width", widthInPixel)
            })


        }
    }, ptsBlock_price_table.prototype.checkColWidthPerc = function() {
        "table" === this.getParam("calc_width") && this.setColWidthPerc()
    }, ptsBlock_price_table.prototype.setColWidthPerc = function() {
        var $cols = this._getCols(parseInt(this.getParam("enb_desc_col")));
        this.setColsWidth(100 / $cols.length, !0)
    }, ptsBlock_price_table.prototype.setTableWidth = function(width, measure) {
        width && parseInt(width) ? (width = parseInt(width), this.setParam("table_width", width)) : width = this.getParam("table_width"), measure ? this.setParam("table_width_measure", measure) : measure = this.getParam("table_width_measure"), this._$.width(width + measure)
    }, ptsBlock_price_table.prototype.setCalcWidth = function(type) {
        switch (type ? this.setParam("calc_width", type) : type = this.getParam("calc_width"), type) {
            case "table":
                this.setTableWidth(), this.setColWidthPerc();
                break;
            case "col":
                var enb_desc_col = 0 != this.getParam("enb_desc_col");
                this._$.width(this._getCols(enb_desc_col).length * this.getParam("col_width")), this.setColsWidth(this.getParam("col_width"))
        }
    }, ptsBlock_price_table.prototype._fixResponsive = function() {
        if ("1" != this.getParam("is_horisontal_row_type")) {
            var $parent = this._$.parents(".ptsTableFrontedShell:first").parent(),
                parentWidth = $parent.width(),
                widthMeasure = this.getParam("table_width_measure"),
                calcWidth = this.getParam("calc_width"),
                includeDesc = parseInt(this.getParam("enb_desc_col")),
                $cols = this._getCols(includeDesc),
                actualTblWidth = this._$.width(),
                criticalColWidth = isNaN(parseInt(this.getParam("resp_min_col_width"))) ? 150 : parseInt(this.getParam("resp_min_col_width")),
                dsblResponsive = parseInt(this.getParam("dsbl_responsive"));
            switch (this._$.removeClass("ptsBlockMobile"), calcWidth) {
                case "table":
                    switch (widthMeasure) {
                        case "%":
                            var self = this,
                                removeOtherDescCol = function() {
                                    if (!dsblResponsive && !_ptsIsEditMode() && self._$.find(".ptsTableDescCol").length > 1 && includeDesc) {
                                        var $descCols = self._$.find(".ptsTableDescCol"),
                                            firstCol = !1;
                                        $descCols.each(function() {
                                            var $this = jQuery(this);
                                            return firstCol ? void $this.remove() : void(firstCol = !0)
                                        })
                                    }
                                };
                            removeOtherDescCol(), $cols = this._getCols(includeDesc);
                            var colsNum = $cols.length,
                                currWidth = actualTblWidth / colsNum;
                            if (currWidth <= criticalColWidth && !dsblResponsive) {
                                if ($cols.css("width", "100%"), !_ptsIsEditMode() && includeDesc) {
                                    var $descColumn = this._$.find(".ptsTableDescCol"),
                                        $columns = this._$.find(".ptsCol:not(.ptsTableDescCol)"),
                                        firstCol = !1;
                                    $columns.each(function() {
                                        var $this = jQuery(this);
                                        return firstCol ? void $descColumn.clone().insertBefore($this) : void(firstCol = !0)
                                    }), this._isResponsiveDescInit = !0, this._$.find(".ptsCol").css("width", "50%")
                                }
                                this._$.addClass("ptsBlockMobile")
                                var $tooltipstedCells = this._$.find(".ptsCell[title], .ptsColFooter[title], .ptsColHeader[title], .ptsColDesc[title]")
                                var tooltipsterSettings = {
                                    contentAsHTML: !0,
                                    interactive: !0,
                                    speed: 250,
                                    delay: 0,
                                    animation: "swing",
                                    maxWidth: 450,
                                    position: "top"
                                }
                                $tooltipstedCells.tooltipster(tooltipsterSettings), this.setParam("went_to_responsive", 1)
                            } else this.getParam("went_to_responsive") && (this.setColWidthPerc(), this.setParam("went_to_responsive", 0));
                            break;
                        case "px":
                            actualTblWidth > parentWidth ? (this.setParam("went_to_responsive", this.getParam("table_width")), this.setTableWidth(100, "%"), this._fixResponsive()) : this.getParam("went_to_responsive") && (this.setTableWidth(this.getParam("went_to_responsive"), "px"), this.setParam("went_to_responsive", 0))
                    }
                    break;
                case "col":
                    var colsNum = $cols.length,
                        currWidth = parseFloat(this.getParam("col_width"));
                    currWidth * colsNum >= parentWidth ? (this.setParam("went_to_responsive", currWidth), this.setParam("table_width", 100), this.setParam("table_width_measure", "%"), this.setCalcWidth("table"), this._fixResponsive()) : this.getParam("went_to_responsive") && (this.setCalcWidth("col"), this.setParam("col_width", this.getParam("went_to_responsive")), this.setParam("went_to_responsive", 0))
            }
        }
    }, ptsBlock_price_table.prototype._refreshCellsHeight = function() {
        var $cols = this._getCols(!0),
            self = this,
            sizes = this.getMaxColsSizes(!0);
        $cols.each(function() {
            for (var key in sizes) {
                var $entity = jQuery(this).find(sizes[key].sel);
                if ("1" == self.getParam("is_horisontal_row_type")) $entity.css({
                    height: "auto"
                });
                else {
                    if ("rows" == key) {
                        $entity.css({
                            height: "auto"
                        });
                        continue
                    }
                    if ($entity && $entity.length)
                        if ("cells" == key) {
                            var cellNum = 0;
                            $entity.each(function() {
                                jQuery(this).css("height", sizes[key].height[cellNum]), cellNum++
                            })
                        } else $entity.outerHeight(sizes[key].height), $entity.outerHeight() != sizes[key].height && $entity.css("height", sizes[key].height)
                }
            }
        })
    }, ptsElementBase.prototype.getId = function() {
        return this._id
    }, ptsElementBase.prototype.getBlock = function() {
        return this._block
    }, ptsElementBase.prototype._onlyFirstHtmlInit = function() {
        return !(!this._$ || this._$.data("first-inited")) && (this._$.data("first-inited", 1), !0)
    }, ptsElementBase.prototype.setIterNum = function(num) {
        this._iterNum = num, this._$.data("iter-num", num)
    }, ptsElementBase.prototype.getIterNum = function() {
        return this._iterNum
    }, ptsElementBase.prototype.$ = function() {
        return this._$
    }, ptsElementBase.prototype.getCode = function() {
        return this._code
    }, ptsElementBase.prototype._setCode = function(code) {
        this._code = code
    }, ptsElementBase.prototype._init = function() {
        this._beforeInit()
    }, ptsElementBase.prototype._beforeInit = function() {}, ptsElementBase.prototype.destroy = function() {}, ptsElementBase.prototype.get = function(opt) {
        return jQuery("<div/>").html(this._$.attr("data-" + opt)).text()
    }, ptsElementBase.prototype.set = function(opt, val) {
        this._$.attr("data-" + opt, jQuery("<div/>").text(val).html())
    }, ptsElementBase.prototype._getEditArea = function() {
        return this._editArea || (this._editArea = this._$.children(".ptsElArea"), this._editArea.length || (this._editArea = this._$.find(".ptsInputShell"))), this._editArea
    }, ptsElementBase.prototype._getOverlay = function() {
        return this._$.find(".ptsElOverlay")
    }, extendPts(ptsElement_btn, ptsElementBase), ptsElement_btn.prototype._onlyFirstHtmlInit = function() {
        if (ptsElement_btn.superclass._onlyFirstHtmlInit.apply(this, arguments) && this.get("customhover-clb")) {
            var clbName = this.get("customhover-clb");
            if ("function" == typeof this[clbName]) {
                var self = this;
                this._getEditArea().hover(function() {
                    self[clbName](!0, this)
                }, function() {
                    self[clbName](!1, this)
                })
            }
        }
    }, ptsElement_btn.prototype._hoverChangeFontColor = function(hover, element) {
        hover ? jQuery(element).data("original-color", this._getEditArea().css("color")).css("color", jQuery(element).parents(".ptsEl:first").attr("data-bgcolor")) : jQuery(element).css("color", jQuery(element).data("original-color"))
    }, ptsElement_btn.prototype._hoverChangeBgColor = function(hover, element) {
        var parentElement = jQuery(element).parents(".ptsEl:first");
        hover ? parentElement.data("original-color", parentElement.css("background-color")).css("background-color", parentElement.attr("data-bgcolor")) : parentElement.css("background-color", parentElement.data("original-color"))
    }, ptsElement_btn.prototype._hoverBorderColor = function(hover, element) {
        hover ? jQuery(element).data("original-color", jQuery(element).css("border-color")).css("border-color", jQuery(element).parents(".ptsEl:first").attr("data-bgcolor")) : jQuery(element).css("border-color", jQuery(element).data("original-color"))
    }, extendPts(ptsElement_table_col, ptsElementBase), extendPts(ptsElement_table_col_desc, ptsElement_table_col), extendPts(ptsElement_table_cell_txt, ptsElementBase);

ptsBlock_price_table.prototype.setTableVertPadding = function(padding, measure) {
    if (padding && parseInt(padding)) {
        padding = parseInt(padding);
        this.setParam('vert_padding', padding);

    } else {
        padding = this.getParam('vert_padding');
    }
    if (measure) {
        this.setParam('vert_padding_measure', measure);
    } else {
        measure = this.getParam('vert_padding_measure');
    }
    this._$.find('.ptsCol').css('paddingBottom', padding + 'px');
};
